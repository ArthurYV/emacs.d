;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(cider-host-history read-expression-history file-name-history extended-command-history coding-system-history command-history org-tags-history w3m-input-url-history w3m-bookmark-title-history w3m-bookmark-section-history minibuffer-history evil-ex-history ido-buffer-history ido-file-history))
(setq cider-host-history '("127.0.0.1" "1"))
(setq read-expression-history '("wq"))
(setq file-name-history '("/private/var/folders/ct/vh9nclld4q32rgmv_yzyd7_h0000gn/T/form-init5095395370123332598.clj" "/Users/huifengshuma/Clojure/Clojure-Project/hello/src/hello/helloworld.clj" "~/.emacs.d/elpa/cider-0.8.2/cider-autoloads.el" "~/.emacs.d/elpa/pkg-info-0.5/pkg-info-autoloads.el" "~/.emacs.d/elpa/epl-0.7/epl-autoloads.el" "~/.emacs.d/elpa/queue-0.1.1/queue-autoloads.el" "~/.emacs.d/learing.clj" "~/Documents/My-wiki-baby/source/_posts/Clojure.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Emacs.md" "~/.emacs.d/elpa/clojure-mode-4.0.1/clojure-mode-autoloads.el" "~/Documents/org-doc/ToDo.org" "/Users/huifengshuma/Documents/org-doc/LaTex.org" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Clojure.md" "/Users/huifengshuma/Documents/org-doc/learing3.clj" "/Users/huifengshuma/Documents/org-doc/learing2.clj" "/Users/huifengshuma/Documents/org-doc/learing.clj" "/Users/huifengshuma/Documents/org-doc/ToDo.org" "/Users/huifengshuma/Documents/org-doc/test.py" "/Users/huifengshuma/Documents/org-doc/ToDo.org" "~/.clojure.clj" "/Users/huifengshuma/Documents/org-doc/ToDo.org" "~/Documents/My-wiki-baby/source/_posts/Clojure.md" "~/Documents/org-doc/ToDo.org" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Clojure.md" "/Users/huifengshuma/Documents/org-doc/ToDo.org" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/iOS7-8.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Emacs.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Thinking.md" "~/Documents/My-wiki-baby/source/_posts/Clojure.md" "~/Documents/org-doc/test.py" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Task.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/My-thinking-model.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Entrepreneurial-insight.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Thinking-in-languages.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Workflow.md" "~/Documents/My-wiki-baby/source/_posts/Matlab.md" "/Users/huifengshuma/Documents/org-doc/ToDo.org_archive" "~/Documents/My-wiki-baby/source/_posts/Entrepreneurial-insight.md" "~/Documents/org-doc/test.java" "~/Documents/My-wiki-baby/source/_posts/My-thinking-model.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/bookmarks.md" "~/Documents/My-wiki-baby/source/_posts/Thinking.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/UIKit.md" "~/Documents/My-wiki-baby/source/_posts/Docker.md" "~/Documents/My-wiki-baby/source/_posts/UIKit.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Linux.md" "~/Documents/My-wiki-baby/source/_posts/bookmarks.md" "/Users/huifengshuma/Documents/org-doc/个体软件.org" "/Users/huifengshuma/Documents/GeeKraft/resources/Plugin/README.md" "~/Documents/My-wiki-baby/source/_posts/Emacs.md" "/Users/huifengshuma/Documents/org-doc/test.py" "/Users/huifengshuma/Documents/org-doc/python.org" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/python.md" "~/Documents/My-wiki-baby/source/_posts/Github.md" "/Users/huifengshuma/Documents/org-doc/Matlab.org" "~/Documents/My-wiki-baby/source/_posts/Workflow.md" "~/ACM程序/test.c" "~/Documents/My-wiki-baby/source/_posts/Minecraft-command.md" "~/Project/Geekcraft/plugins/README.md" "~/Documents/org-doc/大学物理.org" "~/Documents/My-wiki-baby/source/_posts/Plan.md" "~/Documents/org-doc/离散数学.org" "~/Documents/My-wiki-baby/source/_posts/Core-Animation.md" "~/Documents/My-wiki-baby/source/_posts/Problem.md" "~/Documents/My-wiki-baby/source/_posts/Thinking-in-languages.md" "~/Documents/My-wiki-baby/source/_posts/Task.md" "~/MyPythonModel/HeadFirstPython/chapter3/openData.py" "~/Documents/org-doc/java.org" "~/MyPythonModel/HeadFirstPython/chapter3/test.py" "~/Documents/org-doc/test.c" "~/Documents/org-doc/python.org" "/Users/huifengshuma/Documents/org-doc/java.org" "/Users/huifengshuma/MyPythonModel/HeadFirstPython/chapter3/test.py" "/Users/huifengshuma/MyPythonModel/HeadFirstPython/chapter3/openData.py" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Design-Pattern.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Coding-Standards.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Core-Animation.md" "/Users/huifengshuma/Documents/org-doc/离散数学.org"))
(setq extended-command-history '("cider" "cider-jack-in" "package-install" "package-refresh-contents" "org-edit-src-code" "run-python" "python-mode" "evil-insert-line" "auto-insert" "org-mode" "snippet-mode" "evil-visual-block" "emacs-lisp-byte-code-mode" "markdown-insert-code" "org-insert-drawer" "org-insert-subheading" "multi-term-dedicated-open" "eshell" "w3m"))
(setq command-history '((kill-buffer "form-init5095395370123332598.clj") (kill-buffer "*cider-repl hello*<2>") (kill-buffer "*cider-error*") (cider "127.0.0.1" 56875) (cider-connect "1" 1) (evil-set-marker 49) (evil-delete 1 65 'line nil nil) (evil-delete 59 65 'line nil nil) (find-file "/Users/huifengshuma/Clojure/Clojure-Project/hello/src/hello/helloworld.clj") (kill-buffer "*nrepl-server hello*") (kill-buffer "*cider-error*") (evil-delete 65 65 'exclusive nil nil) (evil-surround-delete 127) (kill-buffer "MindNode.md") (cider-jack-in nil) (kill-buffer "bookmarks.md") (kill-buffer "learing.clj") (kill-buffer "README.md") (package-install 'cider) (package-refresh-contents) (evil-delete 1 1 'exclusive nil nil) (evil-surround-delete 100) (package-install 'cider) (package-menu-mode) (package-menu-mode) (evil-delete 247 247 'line nil nil) (package-refresh-contents) (package-install 'cider) (package-install 'nrepl-ritz) (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Emacs.md") (clojure-mode) (package-install 'clojure-mode) (find-file "/Users/huifengshuma/Documents/org-doc/LaTex.org") (eval-expression 'wq nil) (evil-paste-from-register 127) (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Clojure.md") (find-file "/Users/huifengshuma/Documents/org-doc/learing3.clj") (find-file "/Users/huifengshuma/Documents/org-doc/learing2.clj") (find-file "/Users/huifengshuma/Documents/org-doc/learing.clj") (evil-paste-from-register 18) (evil-paste-from-register 18) (evil-paste-from-register 18) (find-file "/Users/huifengshuma/Documents/org-doc/learing.clj") (evil-paste-from-register 27) (evil-delete 2372 2688 'line nil nil) (find-file "/Users/huifengshuma/Documents/org-doc/ToDo.org") (kill-buffer "test.py") (kill-buffer "*Python*") (find-file "/Users/huifengshuma/Documents/org-doc/test.py") (kill-buffer "test.py") (run-python "/usr/bin/python -i" t nil) (find-file "/Users/huifengshuma/Documents/org-doc/test.py") (find-file "/Users/huifengshuma/Documents/org-doc/ToDo.org") (kill-buffer "ToDo.org") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Clojure.md") (find-file "/Users/huifengshuma/Documents/org-doc/ToDo.org") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/iOS7-8.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Clojure.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Emacs.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Clojure.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Thinking.md") (ace-jump-word-mode 97) (evil-replace 803 803 'exclusive 127) (run-python "/usr/bin/python -i" t nil) (evil-yank 511 518 'line nil nil) (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Clojure.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Task.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/My-thinking-model.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Clojure.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Thinking.md") (ace-jump-word-mode 97) (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Entrepreneurial-insight.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Thinking-in-languages.md") (switch-to-buffer "Clojure.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Thinking.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Workflow.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Clojure.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/My-thinking-model.md") (kill-buffer "Entrepreneurial-insight.md") (kill-buffer "ToDo.org") (find-file "/Users/huifengshuma/Documents/org-doc/ToDo.org") (kill-buffer "ToDo.org_archive") (find-file "/Users/huifengshuma/Documents/org-doc/ToDo.org_archive") (kill-buffer "Task.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Task.md") (ace-jump-word-mode 97) (java-mode) (evil-set-marker 27) (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/bookmarks.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Thinking.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/My-thinking-model.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Task.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/My-thinking-model.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/iOS7-8.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/My-thinking-model.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/iOS7-8.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/bookmarks.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Entrepreneurial-insight.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/bookmarks.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/UIKit.md") (kill-buffer "UIKit.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Entrepreneurial-insight.md") (kill-buffer "bookmarks.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/bookmarks.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Entrepreneurial-insight.md") (evil-shift-right 1550 1568 nil) (evil-shift-right 1550 1567 nil) (evil-shift-right 1572 1572 nil) (evil-shift-left 1550 1576 nil) (evil-shift-left 1550 1580 nil) (evil-shift-left 1550 1584 nil) (evil-shift-right 1550 1580 nil) (evil-shift-right 1550 1576 nil) (evil-shift-right 1550 1572 nil) (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Linux.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/My-thinking-model.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Entrepreneurial-insight.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Thinking.md") (ace-jump-word-mode 97) (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Thinking.md") (find-file "/Users/huifengshuma/Documents/org-doc/个体软件.org") (evil-goto-mark 27) (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/bookmarks.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/My-thinking-model.md") (kill-buffer "README.md") (find-file "/Users/huifengshuma/Documents/GeeKraft/resources/Plugin/README.md") (kill-buffer "*MULTI-TERM-DEDICATED*") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/bookmarks.md") (find-file "/Users/huifengshuma/Documents/org-doc/ToDo.org") (kill-buffer "*MULTI-TERM-DEDICATED*") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Thinking.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/bookmarks.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/My-thinking-model.md") (ace-jump-word-mode 97) (ace-jump-word-mode 99) (find-file "/Users/huifengshuma/Documents/org-doc/test.py") (find-file "/Users/huifengshuma/Documents/org-doc/python.org") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/python.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Thinking.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/bookmarks.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Think-after-reading.md") (switch-to-buffer "Thinking.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/bookmarks.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/MindNode.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Github.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/bookmarks.md") (switch-to-buffer "Workflow.md") (switch-to-buffer "Thinking.md") (find-file "/Users/huifengshuma/Documents/org-doc/Matlab.org") (switch-to-buffer "Plan.md") (org-edit-src-code) (switch-to-buffer "python.org") (switch-to-buffer "Thinking.md") (switch-to-buffer "Workflow.md") (switch-to-buffer "python.org") (switch-to-buffer "Workflow.md") (switch-to-buffer "Thinking.md") (switch-to-buffer "Plan.md") (switch-to-buffer "Thinking.md") (evil-delete 38 38 'exclusive nil nil) (evil-surround-delete 97) (kill-buffer "*Python*") (find-file "/Users/huifengshuma/Documents/org-doc/python.org") (kill-buffer "*Python*") (find-file "/Users/huifengshuma/Documents/org-doc/test.py") (kill-buffer "*anaconda-mode*") (kill-buffer "test.py") (kill-buffer "test.c • org-doc") (evil-delete 32 47 'line nil nil) (kill-buffer "*anaconda-mode*") (kill-buffer "test.py • org-doc") (kill-buffer "*Python*") (find-file "/Users/huifengshuma/Documents/org-doc/python.org") (evil-delete 38 38 'exclusive nil nil) (evil-surround-delete 100) (evil-delete 934 935 'exclusive nil nil) (evil-find-char-to nil 127) (evil-replace 613 614 'exclusive 105) (evil-find-char-to nil 10) (evil-replace 452 453 'exclusive 105) (run-python "/usr/bin/python -i" nil t) (python-mode) (kill-buffer "python.org") (run-python "/usr/bin/python -i" nil t) (switch-to-buffer "test.py") (org-edit-src-code) (run-python "/usr/bin/python -i" nil nil) (org-edit-src-code) (evil-delete 25 25 'exclusive nil nil) (evil-surround-delete 127) (org-edit-src-code) (switch-to-buffer "python.org") (find-file "/Users/huifengshuma/Documents/org-doc/java.org") (evil-find-char-to nil 121) (evil-replace 623 624 'exclusive 116) (evil-record-macro 119) (ace-jump-word-mode 32) (ace-jump-word-mode 32) (ace-jump-word-mode 100) (find-file "/Users/huifengshuma/Documents/org-doc/python.org") (evil-insert-line 1) (auto-insert) (find-file "/Users/huifengshuma/Documents/org-doc/java.org") (org-edit-src-code) (org-edit-src-code) (ido-insert-file) (ido-insert-buffer) (org-mode) (evil-delete 628 628 'exclusive nil nil) (evil-surround-delete 127) (snippet-mode) (diary-insert-block-entry nil) (evil-surround-region 539 567 'block 27) (evil-visual-block nil nil 'block t) (org-edit-src-code) (org-mode) (emacs-lisp-byte-code-mode) (markdown-insert-code) (org-insert-columns-dblock) (org-edit-src-code) (evil-delete 638 638 'exclusive nil nil) (evil-surround-delete 127) (org-insert-drawer nil) (org-edit-src-code) (org-edit-src-code) (evil-delete 505 506 'line nil nil) (diary-insert-block-entry nil) (org-insert-subheading nil) (evil-set-marker 120) (switch-to-buffer "python.org") (switch-to-buffer "test.py") (find-file "/Users/huifengshuma/Documents/org-doc/java.org") (switch-to-buffer "python.org") (evil-find-char-to nil 97) (evil-replace 1 1 'exclusive 105) (find-file "/Users/huifengshuma/MyPythonModel/HeadFirstPython/chapter3/test.py") (find-file "/Users/huifengshuma/Documents/org-doc/java.org") (python-mode) (python-mode) (run-python "/usr/bin/python -i" nil t) (evil-set-marker 120) (find-file "/Users/huifengshuma/MyPythonModel/HeadFirstPython/chapter3/openData.py") (evil-delete 1727 1728 'line nil nil) (ace-jump-word-mode 100) (evil-find-char nil 45) (switch-to-buffer "Task.md") (switch-to-buffer "Thinking-in-languages.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Task.md") (kill-buffer "Coding-Standards.md") (kill-buffer "Design-Pattern.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Design-Pattern.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Coding-Standards.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Core-Animation.md") (switch-to-buffer "Problem.md") (find-file "/Users/huifengshuma/Documents/org-doc/离散数学.org") (kill-buffer "Problem.md") (kill-buffer "Workflow.md") (switch-to-buffer "Thinking-in-languages.md") (evil-surround-region 1 2 'block 100) (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Workflow.md") (switch-to-buffer "Plan.md") (switch-to-buffer "Thinking.md") (switch-to-buffer "My-thinking-model.md") (switch-to-buffer "Thinking-in-languages.md") (switch-to-buffer "Thinking.md") (switch-to-buffer "My-thinking-model.md") (switch-to-buffer "Thinking-in-languages.md") (switch-to-buffer "My-thinking-model.md") (switch-to-buffer "Thinking-in-languages.md") (switch-to-buffer "Problem.md") (switch-to-buffer "My-thinking-model.md") (evil-change 1141 1143 'exclusive nil nil) (switch-to-buffer "Problem.md") (switch-to-buffer "Thinking.md") (switch-to-buffer "Problem.md") (switch-to-buffer "Thinking.md") (switch-to-buffer "Thinking-in-languages.md") (find-file "/Users/huifengshuma/Documents/org-doc/大学物理.org") (ace-jump-word-mode 97) (ace-jump-word-mode 97) (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Plan.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Thinking.md") (kill-buffer "*MULTI-TERM-DEDICATED*") (ace-jump-word-mode 100) (ace-jump-word-mode 6) (ace-jump-word-mode 97) (ace-jump-word-mode 32) (find-file "/Users/huifengshuma/Project/Geekcraft/plugins/README.md") (evil-delete 26 27 'exclusive nil nil) (evil-delete 27 169 'inclusive nil nil) (find-file "/Users/huifengshuma/Documents/org-doc/python.org") (find-file "/Users/huifengshuma/Documents/org-doc/ToDo.org") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Thinking-in-languages.md") (evil-find-char nil 31) (find-file "/Users/huifengshuma/Documents/org-doc/大学物理.org") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/My-thinking-model.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Plan.md") (evil-record-macro 113) (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Thinking.md") (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Problem.md") (kill-buffer "*w3m*") (switch-to-buffer "Thinking.md") (w3m "http://www.google.com.au" nil t) (kill-buffer "*MULTI-TERM-DEDICATED*") (evilnc-comment-operator 10287 10536 'line nil nil) (kill-buffer "init.el") (find-file "/Users/huifengshuma/.emacs.d/init.el") (kill-buffer "Thinking.md") (kill-buffer "*unsent mail*") (kill-buffer "test.py") (evil-find-char-to nil 101) (find-file "/Users/huifengshuma/Documents/org-doc/test.py") (kill-buffer "Task.md") (evilnc-comment-operator 9288 9359 'line nil nil) (evil-shift-right 9288 9430 nil) (evil-shift-right 9288 9422 nil) (evil-shift-right 712 837 nil) (evil-shift-right 712 823 nil) (evil-shift-right 726 837 nil) (evil-shift-right 403 488 nil) (find-file "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Task.md")))
(setq org-tags-history '("静电学"))
(setq w3m-input-url-history '("w3m配置修改" "百度" "www.baidu.com" "http://www.google.com.au/search?q=baidu..."))
(setq w3m-bookmark-title-history '("www.google.com.au"))
(setq w3m-bookmark-section-history '("www.baidu.com"))
(setq minibuffer-history '("56875" "cider" "1" "cider" "pack" "refresh" "1+2" "python" "py" "a+1" "/usr/bin/python -i" "org-ed" "insert-" "insert" "org-ed" "org-edi" "ido-insert" "ido-in" "org-mo" "sni" "code" "block" "org-ed" "org-mode" "code" "insert" "org-insert" "org-edit" "python" "org-insert" "org-ed" "insert-bl" "org-insert" "python-mode" "python-" "py" "http://www.baidu.com" "w3m" "使用org-mode做个人管理" "multi" "multi-term" "emacs文件的情况下，这些配置就写在init" "list-packages" "如何搜索响应的配置文件，敢接快要烦死了" "百度一下方法" "知乎" "dsd" "ds" "ss" "http://www.baidu.com" "baidu" "el：这个插件是指在同一个标签下，被分隔成不同的窗口，然后在写窗口界面进行切换，比如开启了终端机的窗口，然后就可以不用按下exit退出终端模式，而是直接就可以在map模式直接通过逗号加数字的形式来进行界面的跳转" "w3m" "在map模式下，按下逗号，再按下m键或者是x键都会有相应的命令提示，想要执行什么命令都可以根据来执行，非常的方便" "w3m" "es"))
(setq evil-ex-history '(#("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("vsplit" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #(";非常不错的配置文件，没有颜色主题的错误，非常的好用，而且配置很对我的胃口" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37))))
(setq ido-buffer-history '("form-init5095395370123332598.clj" "*cider-repl hello*<2>" "*cider-error*" "*nrepl-server hello*" "*cider-error*" "MindNode.md" "bookmarks.md" "learing.clj" "README.md" "test.py" "*Python*" "test.py" "ToDo.org" "Clojure.md" "Entrepreneurial-insight.md" "ToDo.org" "ToDo.org_archive" "Task.md" "UIKit.md" "bookmarks.md" "README.md" "*MULTI-TERM-DEDICATED*" "Thinking.md" "Workflow.md" "Thinking.md" "Plan.md" "python.org" "Thinking.md" "Workflow.md" "python.org" "Workflow.md" "Thinking.md" "Plan.md" "Thinking.md" "*Python*" "*anaconda-mode*" "test.py" "test.c • org-doc" "*anaconda-mode*" "test.py • org-doc" "*Python*" "python.org" "test.py" "python.org" "test.py" "python.org" "Task.md" "Thinking-in-languages.md" "Coding-Standards.md" "Design-Pattern.md" "Problem.md" "Workflow.md" "Thinking-in-languages.md" "Plan.md" "Thinking.md" "My-thinking-model.md" "Thinking-in-languages.md" "Thinking.md" "My-thinking-model.md" "Thinking-in-languages.md" "My-thinking-model.md" "Thinking-in-languages.md" "Problem.md" "My-thinking-model.md" "Problem.md" "Thinking.md" "Problem.md" "Thinking.md" "Thinking-in-languages.md" "*MULTI-TERM-DEDICATED*" "*w3m*" "Thinking.md" "*MULTI-TERM-DEDICATED*" "init.el" "Thinking.md" "*unsent mail*" "test.py" "Task.md" ".emacs" "*terminal<1>*" "*eshell*" "*Packages*" "*w3m*" "bookmark.html" "Emacs.md" "test.c" "Emacs.md" "*w3m*" "Emacs.md" "*w3m*" "*eshell*" "Task.md" "Thinking.md" "init.el" "Emacs.md" "Thinking.md" "Task.md" "Vim.md" "test.c" "init.el" "Vim.md" "Task.md" "*eshell*"))
(setq ido-file-history '("helloworld.clj" nil "Emacs.md" "ToDo.org" "LaTex.org" "Clojure.md" "learing3.clj" "learing2.clj" "learing.clj" "ToDo.org" "test.py" "ToDo.org" nil "ToDo.org" "Clojure.md" "ToDo.org" "iOS7-8.md" "Clojure.md" "Emacs.md" "Clojure.md" "Thinking.md" "Clojure.md" "Task.md" "My-thinking-model.md" "Clojure.md" "Thinking.md" "Entrepreneurial-insight.md" "Thinking-in-languages.md" "Thinking.md" "Workflow.md" "Clojure.md" "My-thinking-model.md" "ToDo.org" "ToDo.org_archive" "Task.md" "bookmarks.md" "Thinking.md" "My-thinking-model.md" "Task.md" "My-thinking-model.md" "iOS7-8.md" "My-thinking-model.md" "iOS7-8.md" "bookmarks.md" "Entrepreneurial-insight.md" "bookmarks.md" "UIKit.md" "Entrepreneurial-insight.md" "bookmarks.md" "Entrepreneurial-insight.md" "Linux.md" "My-thinking-model.md" "Entrepreneurial-insight.md" "Thinking.md" "个体软件.org" "bookmarks.md" "My-thinking-model.md" "README.md" "bookmarks.md" "ToDo.org" "Thinking.md" "bookmarks.md" "My-thinking-model.md" "test.py" "python.org" "python.md" "Thinking.md" "bookmarks.md" "Think-after-reading.md" "bookmarks.md" "MindNode.md" "Github.md" "bookmarks.md" "Matlab.org" "python.org" "test.py" "python.org" "java.org" "python.org" "java.org" "test.py" "java.org" "openData.py" "Task.md" "Design-Pattern.md" "Coding-Standards.md" "Core-Animation.md" "离散数学.org" "Workflow.md" "大学物理.org" "Plan.md" "Thinking.md" "README.md" "python.org" "ToDo.org" "Thinking-in-languages.md" "大学物理.org" "My-thinking-model.md" "大学物理.org" "Plan.md" "Thinking.md" "Problem.md" "Plan.md" "Thinking.md" "init.el" "Thinking.md" "test.py" "Task.md" ".emacs" "Thinking.md" "Task.md" "init.el" "test.c" "Vim.md" "Task.md" "Thinking.md" "Task.md" "test.c"))
(setq search-ring '("##" "集合" "a" "let" "容器" "let" "()" "bing" "if" "定义" "ve" "函数" "def" "标识符。" "语法糖" "函数"))
(setq regexp-search-ring '("\\_<最后删除掉了用brew安装的pyqt以及pyqt5，选择了使用pip进行重装，重装之后问题变成了qtcore找不到了，这到底是为什么？我连python3都已经卸载了，还想要我怎么样\\_>" "\\_<目前自己就处于一种在整理的状况，清理自己在各个方面的知识库，把组织导图给画出来，开始支配，而不再是混乱不堪\\_>" "\\_<c\\_>" "\\_<com/p/2671160410\\_>" "\\_<现在要我重新去整理时间就太没有必要了，我直接看明天上什么可，就去学习什么，如果有很多课就平均分配时间\\_>" "\\_<com/100000PM/20010731\\_>" "\\_<其次是自己的技术提升问题，这个学期基本什么都没有干，很多设立下来的目标都没有花时间去实现，现在在兼顾学业的基础上要把自己的各个指标都搞上去才可以，这才是我想要的大学生活才对，而不是像现在这样如此的随心所欲，该做的事情都不去做好，计划计划，严格的去执行自己的计划，尽快找到符合自己的行动模式才可以，这计划自己都已经不知道说了多少遍了，自己都要被自己给烦死了，痛下决心要进行改革才可以\\_>" "\\_<工作效率非常底下的一点就是自己的没有计划的工作，有计划的工作也不能够坚决的去执行，实在是非常的糟糕，现在必须要立刻解决这样的情况才可，否则真心会死人\\_>" "\\_<如何现在在钻研的问题不是当前要研究的重点，那么就要把度给掌握好，该放手就放手，回到正轨上去解决当前的重点问题，而不是钻到牛角尖里面无法自拔\\_>" "\\_<工作效率非常底下的一点就是自己的没有计划的工作，有计划的工作也不能够坚决的去执行，实在是非常的糟糕，现在必须要立刻解决这样的情况才可，否则真心会死人\\_>" "\\_<另外自己没次去做某一样复杂的配置的时候，都应该要习惯性的去写一下配置日志才可以，这样可以很大程度上提高自己的工作日志，就像这次配置webkit一样，就应该写一下webkit来进行跟踪记录才可以\\_>" "\\_<w3m：emacs内置的浏览器，非常的不错，可以用来做简单的网页浏览，如果可以在同一个屏幕下来搞定就太方便了；w3m也有一大堆的快捷键是需要进行学习的，学会在当前窗口打开w3m，并且进行浏览，在w3m下一个，vim下的快捷键还是很不习惯，还要花上不少的时间才能够适应；另外w3m的界面太蛋疼了，没有任何的样式，这样非常不方便进行浏览，而且默认的操作实在是太蛋疼了，简直不能用，研究一下怎么使用webkit，把自己的emacs再做一次强化\\_>"))
(setq kill-ring '(#("l" 0 1 (button (t) category default-button var nil class "clojure.lang.Util" method "runtimeException" name "clojure.lang.Util/runtimeException" file "Util.java" line 221 flags (java) follow-link t action cider-stacktrace-navigate help-echo "View source at this location" font-lock-face cider-stacktrace-face detail 2 cause 1 invisible nil collapsed nil)) #("(println 'heheheh)

" 0 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t)) #("(println 'heheheh)
" 0 17 (fontified t) 17 19 (fontified t)) #("(str 'hahahah)
" 0 13 (fontified t) 13 15 (fontified t)) #("nil" 0 3 (fontified t face font-lock-constant-face)) #("nil(println 'heheheh)
" 0 3 (face font-lock-constant-face fontified t) 3 20 (fontified t) 20 22 (fontified t)) #("(str 'hahahah)

" 0 13 (fontified t) 13 15 (fontified t) 15 16 (fontified t)) #("; CIDER 0.8.2 (Java 1.8.0_25, Clojure 1.6.0, nREPL 0.2.6)
user> 
" 0 2 (font-lock-face font-lock-comment-face fontified t face font-lock-comment-delimiter-face yank-handler (evil-yank-line-handler)) 2 57 (font-lock-face font-lock-comment-face fontified t face font-lock-comment-face yank-handler (evil-yank-line-handler)) 57 58 (fontified t face font-lock-comment-face yank-handler (evil-yank-line-handler)) 58 64 (fontified t font-lock-face cider-repl-prompt-face read-only t intangible t cider-repl-prompt t rear-nonsticky (cider-repl-prompt read-only font-lock-face intangible) yank-handler (evil-yank-line-handler)) 64 65 (yank-handler (evil-yank-line-handler))) #("user> " 0 6 (rear-nonsticky (cider-repl-prompt read-only font-lock-face intangible) cider-repl-prompt t intangible t read-only t font-lock-face cider-repl-prompt-face fontified t)) #("user> 
" 0 6 (yank-handler (evil-yank-line-handler) rear-nonsticky (cider-repl-prompt read-only font-lock-face intangible) cider-repl-prompt t intangible t read-only t font-lock-face cider-repl-prompt-face fontified t) 6 7 (yank-handler (evil-yank-line-handler))) #("R" 0 1 (face font-lock-comment-face fontified t font-lock-face font-lock-comment-face)) #(":profiles {:dev {:plugins }}" 0 1 (face clojure-keyword-face fontified t) 1 2 (face clojure-keyword-face fontified t) 2 3 (face clojure-keyword-face fontified t) 3 4 (face clojure-keyword-face fontified t) 4 5 (face clojure-keyword-face fontified t) 5 6 (face clojure-keyword-face fontified t) 6 7 (face clojure-keyword-face fontified t) 7 8 (face clojure-keyword-face fontified t) 8 9 (face clojure-keyword-face fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 15 (face clojure-keyword-face fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 25 (face clojure-keyword-face fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t)) "" #("
" 0 1 (yank-handler (evil-yank-line-handler))) "{:user {:plugins [[swank-clojure \"1.3.3\"] ]}}" #("    - 大部分语法糖都是不理解的，话说函数式的教程就是这么坑爹的吗？一堆的挂念不去解释清楚，这让我只能一个一个来了" 0 4 (fontified t) 4 5 (face markdown-list-face fontified t) 5 59 (fontified t)) #("           
" 0 4 (face markdown-pre-face font-lock-multiline t fontified t) 4 12 (face markdown-pre-face font-lock-multiline t fontified t)) #("       
" 0 8 (face markdown-pre-face font-lock-multiline t fontified t)) "- Bindings
    - 不存在变量这一说法，binding也是一个新概念，可以理解为标识符与表达式的绑定
    - 分类：
        - 全局binding
        - 线程本地(thread local)
        - 函数内本地的
        - 表达式内部的binding
- Symbols
    - 这个理解为象征，类似java里面的变量的名字，是用来给东西命名的
    - Symbols的值是它所代表的名字的值，如果要使用Symbols的值，就需要把它用引号引起来，`'n'`，就相当于标识符
    - 标识符而可以代表运行环境中的对象，因此可以与特定对象绑定起来，比如字符串或者函数之类的，都是可以的

            (def my-string \"Hello World!\") ;把my-string与\"Hello World\"绑定在一起
            (def say-hello
            (fn [name] (println (str \"Hello\" name)))) ;把say-hello与函数fn绑定在一起，具体的函数也是属于特定的对象
 " #("

" 0 1 (fontified t font-lock-multiline t face markdown-pre-face) 1 2 (fontified t font-lock-multiline t face markdown-pre-face)) #("- Clojure中存在非常多的语法糖，但是我要看的是具体的语法，暂时不是这些" 0 1 (face markdown-list-face fontified t) 1 39 (fontified t)) "
- 不一样的操作数
    - Clojure中的操作符是前置的，这样的一个好处是当操作数很多的时候，只需要写一个操作符便可，这样看来一个操作符就相当于一个函数，`(+ a b c)`表示`a + b + c`" #("
" 0 1 (fontified t font-lock-multiline t face markdown-pre-face)) #("
" 0 1 (fontified t font-lock-multiline t face markdown-pre-face)) #("
" 0 1 (fontified t font-lock-multiline t face markdown-pre-face)) #("g" 0 1 (font-lock-face (:foreground "#F8F8F2" :background "black" :inverse-video nil) fontified t)) #("串" 0 1 (fontified t)) #("
            (str (subs word 1) first-letter \"ay\");else分支)))
        (println (pig-latin \"red\"))


" 0 1 (fontified t) 1 13 (fontified t) 13 18 (fontified t) 18 49 (fontified t) 49 57 (fontified t) 57 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 61 (fontified t) 61 69 (fontified t) 69 78 (fontified t) 78 95 (fontified t) 95 96 (fontified t) 96 97 (fontified t) 97 98 (fontified t) 98 99 (fontified t)) #("        (println (pig-latin \"orange\"))" 0 8 (fontified t) 8 13 (fontified t) 13 17 (fontified t) 17 25 (fontified t) 25 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t)) #("- 通过一个具体的demo来分析一下Clojure代码的具体运作" 0 1 (fontified t face markdown-list-face) 1 32 (fontified t)) #("        ;当一个set被用作函数的时候，将会返回一个布尔值
        ;这个布尔值反映的是这个参数是否在这个集合里面
        (def vowel? (set \"aeiou\"))
        (defn pig-latin [word];定义了一个pig-latin函数，参数是word
        ;word将会被当成是字符串
         (let [first-letter (first word)] ;分配了一个local binding
          (if (vowel? first-letter)
            (str word \"ay\");if语句的成立分支
" 0 8 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 8 33 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 33 34 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 34 42 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 42 65 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 65 74 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 74 86 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 86 99 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 99 100 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 100 109 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 109 113 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 113 125 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 125 130 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 130 165 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 165 189 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 189 194 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 194 208 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 208 220 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 220 252 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 252 256 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 256 261 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 261 276 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 276 290 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler)) 290 316 (face markdown-pre-face font-lock-multiline t fontified t yank-handler (evil-yank-line-handler))) #("    - 第一个参数是vector，里面包含名字-表达式的对子" 0 4 (fontified t) 4 5 (fontified t face markdown-list-face) 5 32 (fontified t)) #("
" 0 1 (fontified t font-lock-multiline t face markdown-pre-face)) #("(def))" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) #("())" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) #("(def))" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) "" #("print(\"hahaha\")" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 7 (fontified t syntax-table (15) face font-lock-string-face) 7 13 (fontified t face font-lock-string-face) 13 14 (fontified t syntax-table (15) face font-lock-string-face) 14 15 (fontified t)) #("                  
" 0 18 (fontified t) 18 19 (fontified t)) #("
" 0 1 (fontified t)) "" #("c = \"c\"" 0 1 (fontified t face font-lock-variable-name-face) 1 4 (fontified t) 4 5 (syntax-table (15) fontified t face font-lock-string-face) 5 6 (fontified t face font-lock-string-face) 6 7 (syntax-table (15) fontified t face font-lock-string-face)) #("#c = 3.2" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 8 (fontified t face font-lock-comment-face)) #("print(c+\"w\")" 0 5 (fontified t face font-lock-keyword-face) 5 8 (fontified t) 8 9 (fontified t syntax-table (15) face font-lock-string-face) 9 10 (fontified t face font-lock-string-face) 10 11 (fontified t syntax-table (15) face font-lock-string-face) 11 12 (fontified t)) #("：- 动态语言：- 动态语言：" 0 1 (fontified t) 1 7 (fontified t) 7 8 (fontified t rear-nonsticky t) 8 14 (fontified t) 14 15 (fontified t rear-nonsticky t)) "- 动态语言：" #("- 动态语言：
" 0 1 (fontified t face markdown-list-face yank-handler (evil-yank-line-handler)) 1 7 (fontified t yank-handler (evil-yank-line-handler)) 7 8 (yank-handler (evil-yank-line-handler))) #("作为动态语言就不需要在写代码的时候声明变量类型，这又是一大便利
" 0 32 (fontified t)) #("    - " 0 4 (fontified t) 4 5 (fontified t face markdown-list-face) 5 6 (fontified t)) #("接下来是什么呢？" 0 8 (fontified t)) #("
" 0 1 (fontified t)) #(" " 0 1 (fontified t)) #("        
" 0 1 (c-is-sws t fontified t) 1 8 (fontified t) 8 9 (fontified t)) #("                " 0 1 (c-in-sws t fontified t) 1 16 (fontified t)) #("
" 0 1 (fontified t)) #("摘录来自: Matt Neuburg. “Programming iOS 7”。 iBooks`
" 0 45 (fontified t) 45 46 (fontified t) 46 47 (fontified t) 47 48 (fontified t) 48 49 (fontified t)) #(" " 0 1 (fontified t)) #("## 免费wifi的" 0 1 (fontified t face markdown-header-delimiter-face) 1 2 (fontified t face markdown-header-delimiter-face) 2 3 (fontified t) 3 10 (fontified t face markdown-header-face-2)) #("- 在现在这个时代还仍然" 0 1 (face markdown-list-face fontified t) 1 12 (fontified t)) ""))
