;;; Automatically generated on Fri May 15 23:29:38 2015
;;; Invoked by huifengshuma@huifengshuma.local using 24.5.1
(setq-default session-file-alist '(("~/Documents/My-wiki-baby/source/_posts/Clojure.md" 1125 6162 1 nil nil 1125 (overwrite-mode)) ("~/Clojure/Clojure-Project/hello/src/hello/helloworld.clj" 36 1 1 nil nil 33 (overwrite-mode)) ("~/Clojure/Clojure-Project/hello/src/hello/helloworld.cji" 22 nil 1 nil nil 22 (overwrite-mode)) ("~/Clojure/Clojure-Project/hello/project.clj" 344 nil 1 nil nil 344 (overwrite-mode)) ("~/.lein/profiles.clj" 165 nil 1 nil nil 212 (overwrite-mode)) ("~/.emacs.d/elpa/cider-0.8.2/cider-autoloads.el" 5206 nil 1 nil nil 5206 (overwrite-mode)) ("~/.emacs.d/elpa/pkg-info-0.5/pkg-info-autoloads.el" 3738 nil 1 nil nil 3738 (overwrite-mode)) ("~/.emacs.d/elpa/epl-0.7/epl-autoloads.el" 215 nil 1 nil nil 215 (overwrite-mode)) ("~/.emacs.d/elpa/queue-0.1.1/queue-autoloads.el" 334 nil 1 nil nil 334 (overwrite-mode)) ("~/Documents/org-doc/learing.clj" 247 nil 1 nil nil 247 (overwrite-mode)) ("~/Documents/My-wiki-baby/source/_posts/Emacs.md" 10818 10550 1 nil nil 10818 (overwrite-mode)) ("~/.emacs.d/elpa/clojure-mode-4.0.1/clojure-mode-autoloads.el" 492 nil 1 nil nil 492 (overwrite-mode)) ("~/Documents/org-doc/ToDo.org" 1333 nil 1 nil nil 1333 (overwrite-mode)) ("~/Documents/org-doc/learing3.clj" 142 nil 1 nil nil 344 (overwrite-mode)) ("~/Documents/org-doc/learing2.clj" 225 nil 1 nil nil 225 (overwrite-mode)) ("~/Documents/org-doc/test.py" 11 11 1 nil nil 31 (overwrite-mode)) ("~/Documents/My-wiki-baby/source/_posts/iOS7-8.md" 1276 nil 1 nil nil 1277 (overwrite-mode)) ("~/Documents/My-wiki-baby/source/_posts/Thinking.md" 10572 10073 1 nil nil 10572 (overwrite-mode)) ("~/Documents/My-wiki-baby/source/_posts/Task.md" 1972 1727 1 nil nil 1972 (overwrite-mode)) ("~/Documents/My-wiki-baby/source/_posts/My-thinking-model.md" 4610 4558 1 nil nil 4610 (overwrite-mode)) ("~/Documents/My-wiki-baby/source/_posts/Entrepreneurial-insight.md" 1990 1916 1 nil nil 1990 (overwrite-mode)) ("~/Documents/My-wiki-baby/source/_posts/Workflow.md" 1592 1523 1 nil nil 1576 (overwrite-mode)) ("~/Documents/My-wiki-baby/source/_posts/Matlab.md" 59 nil 1 nil nil 60 (overwrite-mode)) ("~/Documents/org-doc/test.java" 142 1 1 nil nil nil (overwrite-mode)) ("~/Documents/My-wiki-baby/source/_posts/bookmarks.md" 733 1353 1 nil nil 733 (overwrite-mode)) ("~/Documents/My-wiki-baby/source/_posts/Linux.md" 1756 nil 1 nil nil 1756 (overwrite-mode)) ("~/Documents/My-wiki-baby/source/_posts/Docker.md" 63 nil 1 nil nil 64 (overwrite-mode)) ("~/Documents/org-doc/个体软件.org" 22 1 1 nil nil 23 (overwrite-mode)) ("~/Documents/My-wiki-baby/source/_posts/python.md" 786 nil 1 nil nil 786 (overwrite-mode)) ("~/Documents/org-doc/Matlab.org" 100 1 1 nil nil 99 (overwrite-mode)) ("~/Documents/My-wiki-baby/source/_posts/Plan.md" 805 756 1 nil nil 768 (overwrite-mode)) ("~/Documents/org-doc/python.org" 1548 1507 1 nil nil 1547 (overwrite-mode)) ("~/MyPythonModel/HeadFirstPython/chapter3/test.py" 61 61 1 nil nil 61 (overwrite-mode)) ("~/Documents/org-doc/test.c" 32 30 1 nil nil 32 (overwrite-mode)) ("~/Documents/org-doc/java.org" 231 215 1 nil nil 230 (overwrite-mode)) ("~/MyPythonModel/HeadFirstPython/chapter3/openData.py" 32 nil 1 nil nil 343 (overwrite-mode)) ("~/Documents/My-wiki-baby/source/_posts/Thinking-in-languages.md" 4682 4759 1 nil nil 4683 (overwrite-mode)) ("~/Documents/My-wiki-baby/source/_posts/Problem.md" 935 1290 1 nil nil 1290 (overwrite-mode)) ("~/Documents/org-doc/大学物理.org" 515 48 1 nil nil 515 (overwrite-mode)) ("~/Project/Geekcraft/plugins/README.md" 748 1 1 nil nil 672 (overwrite-mode)) ("~/Documents/My-wiki-baby/source/_posts/Minecraft-command.md" 350 nil 1 nil nil 350 (overwrite-mode)) ("~/.emacs.d/init.el" 2046 nil 1 nil nil 1949 (overwrite-mode)) ("~/ACM程序/test.c" 462 nil 1 nil nil 462 (overwrite-mode)) ("~/.w3m/bookmark.html" 147 146 1 nil nil 147 (overwrite-mode))))
(setq-default file-name-history '("/Users/huifengshuma/Clojure/Clojure-Project/hello/src/hello/helloworld.clj" "~/.emacs.d/elpa/cider-0.8.2/cider-autoloads.el" "~/.emacs.d/elpa/pkg-info-0.5/pkg-info-autoloads.el" "~/.emacs.d/elpa/epl-0.7/epl-autoloads.el" "~/.emacs.d/elpa/queue-0.1.1/queue-autoloads.el" "~/.emacs.d/learing.clj" "~/Documents/My-wiki-baby/source/_posts/Clojure.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Emacs.md" "~/.emacs.d/elpa/clojure-mode-4.0.1/clojure-mode-autoloads.el" "~/Documents/org-doc/ToDo.org" "/Users/huifengshuma/Documents/org-doc/LaTex.org" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Clojure.md" "/Users/huifengshuma/Documents/org-doc/learing3.clj" "/Users/huifengshuma/Documents/org-doc/learing2.clj" "/Users/huifengshuma/Documents/org-doc/learing.clj" "/Users/huifengshuma/Documents/org-doc/ToDo.org" "/Users/huifengshuma/Documents/org-doc/test.py" "~/.clojure.clj" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/iOS7-8.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Thinking.md" "~/Documents/org-doc/test.py" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Task.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/My-thinking-model.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Entrepreneurial-insight.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Thinking-in-languages.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Workflow.md" "~/Documents/My-wiki-baby/source/_posts/Matlab.md" "/Users/huifengshuma/Documents/org-doc/ToDo.org_archive" "~/Documents/My-wiki-baby/source/_posts/Entrepreneurial-insight.md" "~/Documents/org-doc/test.java" "~/Documents/My-wiki-baby/source/_posts/My-thinking-model.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/bookmarks.md" "~/Documents/My-wiki-baby/source/_posts/Thinking.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/UIKit.md" "~/Documents/My-wiki-baby/source/_posts/Docker.md" "~/Documents/My-wiki-baby/source/_posts/UIKit.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Linux.md" "~/Documents/My-wiki-baby/source/_posts/bookmarks.md" "/Users/huifengshuma/Documents/org-doc/个体软件.org" "/Users/huifengshuma/Documents/GeeKraft/resources/Plugin/README.md" "~/Documents/My-wiki-baby/source/_posts/Emacs.md" "/Users/huifengshuma/Documents/org-doc/python.org" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/python.md" "~/Documents/My-wiki-baby/source/_posts/Github.md" "/Users/huifengshuma/Documents/org-doc/Matlab.org" "~/Documents/My-wiki-baby/source/_posts/Workflow.md" "~/ACM程序/test.c" "~/Documents/My-wiki-baby/source/_posts/Minecraft-command.md" "~/Project/Geekcraft/plugins/README.md" "~/Documents/org-doc/大学物理.org" "~/Documents/My-wiki-baby/source/_posts/Plan.md" "~/Documents/org-doc/离散数学.org" "~/Documents/My-wiki-baby/source/_posts/Core-Animation.md" "~/Documents/My-wiki-baby/source/_posts/Problem.md" "~/Documents/My-wiki-baby/source/_posts/Thinking-in-languages.md" "~/Documents/My-wiki-baby/source/_posts/Task.md" "~/MyPythonModel/HeadFirstPython/chapter3/openData.py" "~/Documents/org-doc/java.org" "~/MyPythonModel/HeadFirstPython/chapter3/test.py" "~/Documents/org-doc/test.c" "~/Documents/org-doc/python.org" "/Users/huifengshuma/Documents/org-doc/java.org" "/Users/huifengshuma/MyPythonModel/HeadFirstPython/chapter3/test.py" "/Users/huifengshuma/MyPythonModel/HeadFirstPython/chapter3/openData.py" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Design-Pattern.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Coding-Standards.md" "/Users/huifengshuma/Documents/My-wiki-baby/source/_posts/Core-Animation.md" "/Users/huifengshuma/Documents/org-doc/离散数学.org"))
(setq-default search-ring '("##" "集合" "a" "let" "容器" "()" "bing" "if" "定义" "ve" "函数" "def" "标识符。" "语法糖"))
(setq-default regexp-search-ring '("\\_<最后删除掉了用brew安装的pyqt以及pyqt5，选择了使用pip进行重装，重装之后问题变成了qtcore找不到了，这到底是为什么？我连python3都已经卸载了，还想要我怎么样\\_>" "\\_<目前自己就处于一种在整理的状况，清理自己在各个方面的知识库，把组织导图给画出来，开始支配，而不再是混乱不堪\\_>" "\\_<c\\_>" "\\_<com/p/2671160410\\_>" "\\_<现在要我重新去整理时间就太没有必要了，我直接看明天上什么可，就去学习什么，如果有很多课就平均分配时间\\_>" "\\_<com/100000PM/20010731\\_>" "\\_<其次是自己的技术提升问题，这个学期基本什么都没有干，很多设立下来的目标都没有花时间去实现，现在在兼顾学业的基础上要把自己的各个指标都搞上去才可以，这才是我想要的大学生活才对，而不是像现在这样如此的随心所欲，该做的事情都不去做好，计划计划，严格的去执行自己的计划，尽快找到符合自己的行动模式才可以，这计划自己都已经不知道说了多少遍了，自己都要被自己给烦死了，痛下决心要进行改革才可以\\_>" "\\_<工作效率非常底下的一点就是自己的没有计划的工作，有计划的工作也不能够坚决的去执行，实在是非常的糟糕，现在必须要立刻解决这样的情况才可，否则真心会死人\\_>" "\\_<如何现在在钻研的问题不是当前要研究的重点，那么就要把度给掌握好，该放手就放手，回到正轨上去解决当前的重点问题，而不是钻到牛角尖里面无法自拔\\_>" "\\_<另外自己没次去做某一样复杂的配置的时候，都应该要习惯性的去写一下配置日志才可以，这样可以很大程度上提高自己的工作日志，就像这次配置webkit一样，就应该写一下webkit来进行跟踪记录才可以\\_>" "\\_<w3m：emacs内置的浏览器，非常的不错，可以用来做简单的网页浏览，如果可以在同一个屏幕下来搞定就太方便了；w3m也有一大堆的快捷键是需要进行学习的，学会在当前窗口打开w3m，并且进行浏览，在w3m下一个，vim下的快捷键还是很不习惯，还要花上不少的时间才能够适应；另外w3m的界面太蛋疼了，没有任何的样式，这样非常不方便进行浏览，而且默认的操作实在是太蛋疼了，简直不能用，研究一下怎么使用webkit，把自己的emacs再做一次强化\\_>"))
(setq-default buffer-name-history '("Thinking.md" "*nrepl-server hello*" "*cider-error*" "MindNode.md" "bookmarks.md" "learing.clj" "README.md" "test.py" "*Python*" "ToDo.org" "Clojure.md" "Entrepreneurial-insight.md" "ToDo.org_archive" "Task.md" "UIKit.md" "*MULTI-TERM-DEDICATED*" "Workflow.md" "Plan.md" "python.org" "*anaconda-mode*" "test.c • org-doc" "test.py • org-doc" "Thinking-in-languages.md" "Coding-Standards.md" "Design-Pattern.md" "Problem.md" "My-thinking-model.md" "*w3m*" "init.el" "*unsent mail*" ".emacs" "*terminal<1>*" "*eshell*" "*Packages*" "bookmark.html" "Emacs.md" "Vim.md" "test.c"))
(setq-default evil-ex-history '(#("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("vsplit" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #(";非常不错的配置文件，没有颜色主题的错误，非常的好用，而且配置很对我的胃口" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19) 19 20 (ex-index 20) 20 21 (ex-index 21) 21 22 (ex-index 22) 22 23 (ex-index 23) 23 24 (ex-index 24) 24 25 (ex-index 25) 25 26 (ex-index 26) 26 27 (ex-index 27) 27 28 (ex-index 28) 28 29 (ex-index 29) 29 30 (ex-index 30) 30 31 (ex-index 31) 31 32 (ex-index 32) 32 33 (ex-index 33) 33 34 (ex-index 34) 34 35 (ex-index 35) 35 36 (ex-index 36) 36 37 (ex-index 37))))
(setq-default evil-search-backward-history '("\\_<最后删除掉了用brew安装的pyqt以及pyqt5，选择了使用pip进行重装，重装之后问题变成了qtcore找不到了，这到底是为什么？我连python3都已经卸载了，还想要我怎么样\\_>" "\\_<目前自己就处于一种在整理的状况，清理自己在各个方面的知识库，把组织导图给画出来，开始支配，而不再是混乱不堪\\_>" "\\_<市场大小、创新是否有足够吸引力，商业模式是否有价值\\_>" "\\_<c\\_>" "\\_<其次是自己的技术提升问题，这个学期基本什么都没有干，很多设立下来的目标都没有花时间去实现，现在在兼顾学业的基础上要把自己的各个指标都搞上去才可以，这才是我想要的大学生活才对，而不是像现在这样如此的随心所欲，该做的事情都不去做好，计划计划，严格的去执行自己的计划，尽快找到符合自己的行动模式才可以，这计划自己都已经不知道说了多少遍了，自己都要被自己给烦死了，痛下决心要进行改革才可以\\_>" "\\_<工作效率非常底下的一点就是自己的没有计划的工作，有计划的工作也不能够坚决的去执行，实在是非常的糟糕，现在必须要立刻解决这样的情况才可，否则真心会死人\\_>" "\\_<如何现在在钻研的问题不是当前要研究的重点，那么就要把度给掌握好，该放手就放手，回到正轨上去解决当前的重点问题，而不是钻到牛角尖里面无法自拔\\_>" "" "\\_<另外自己没次去做某一样复杂的配置的时候，都应该要习惯性的去写一下配置日志才可以，这样可以很大程度上提高自己的工作日志，就像这次配置webkit一样，就应该写一下webkit来进行跟踪记录才可以\\_>" "\\_<w3m：emacs内置的浏览器，非常的不错，可以用来做简单的网页浏览，如果可以在同一个屏幕下来搞定就太方便了；w3m也有一大堆的快捷键是需要进行学习的，学会在当前窗口打开w3m，并且进行浏览，在w3m下一个，vim下的快捷键还是很不习惯，还要花上不少的时间才能够适应；另外w3m的界面太蛋疼了，没有任何的样式，这样非常不方便进行浏览，而且默认的操作实在是太蛋疼了，简直不能用，研究一下怎么使用webkit，把自己的emacs再做一次强化\\_>"))
(setq-default evil-search-forward-history '(""))
(setq-default extended-command-history '("cider-jack-in" "package-install" "package-refresh-contents" "org-edit-src-code" "run-python" "python-mode" "evil-insert-line" "auto-insert" "org-mode" "snippet-mode" "evil-visual-block" "emacs-lisp-byte-code-mode" "markdown-insert-code" "org-insert-drawer" "org-insert-subheading" "multi-term-dedicated-open" "eshell" "w3m"))
(setq-default helm-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (cl-loop for i in command-history unless \.\.\. collect \.\.\.)) (type . sexp)))
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Add marked files to file-cache" . helm-ff-cache-add-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (cl-loop for i in command-history unless \.\.\. collect \.\.\.)) (type . sexp)))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Add marked files to file-cache" . helm-ff-cache-add-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default ido-buffer-history '("*nrepl-server hello*" "*cider-error*" "MindNode.md" "bookmarks.md" "learing.clj" "README.md" "test.py" "*Python*" "ToDo.org" "Clojure.md" "Entrepreneurial-insight.md" "ToDo.org_archive" "Task.md" "UIKit.md" "*MULTI-TERM-DEDICATED*" "Thinking.md" "Workflow.md" "Plan.md" "python.org" "*anaconda-mode*" "test.c • org-doc" "test.py • org-doc" "Thinking-in-languages.md" "Coding-Standards.md" "Design-Pattern.md" "Problem.md" "My-thinking-model.md" "*w3m*" "init.el" "*unsent mail*" ".emacs" "*terminal<1>*" "*eshell*" "*Packages*" "bookmark.html" "Emacs.md" "test.c" "Vim.md"))
(setq-default ido-file-history '("helloworld.clj" nil "Emacs.md" "ToDo.org" "LaTex.org" "Clojure.md" "learing3.clj" "learing2.clj" "learing.clj" "test.py" "iOS7-8.md" "Thinking.md" "Task.md" "My-thinking-model.md" "Entrepreneurial-insight.md" "Thinking-in-languages.md" "Workflow.md" "ToDo.org_archive" "bookmarks.md" "UIKit.md" "Linux.md" "个体软件.org" "README.md" "python.org" "python.md" "Think-after-reading.md" "MindNode.md" "Github.md" "Matlab.org" "java.org" "openData.py" "Design-Pattern.md" "Coding-Standards.md" "Core-Animation.md" "离散数学.org" "大学物理.org" "Plan.md" "Problem.md" "init.el" ".emacs" "test.c" "Vim.md"))
(setq-default minibuffer-history '("cider" "pack" "refresh" "1+2" "python" "py" "a+1" "/usr/bin/python -i" "org-ed" "insert-" "insert" "org-edi" "ido-insert" "ido-in" "org-mo" "sni" "code" "block" "org-mode" "org-insert" "org-edit" "insert-bl" "python-mode" "python-" "http://www.baidu.com" "w3m" "使用org-mode做个人管理" "multi" "multi-term" "emacs文件的情况下，这些配置就写在init" "list-packages" "如何搜索响应的配置文件，敢接快要烦死了" "百度一下方法" "知乎" "dsd" "ds" "ss" "baidu" "el：这个插件是指在同一个标签下，被分隔成不同的窗口，然后在写窗口界面进行切换，比如开启了终端机的窗口，然后就可以不用按下exit退出终端模式，而是直接就可以在map模式直接通过逗号加数字的形式来进行界面的跳转" "在map模式下，按下逗号，再按下m键或者是x键都会有相应的命令提示，想要执行什么命令都可以根据来执行，非常的方便" "es"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default org-tags-history '("静电学"))
(setq-default read-expression-history '("wq"))
(setq-default serial-name-history '("/dev/ttys0"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default smex-history '(package-install clojure-mode python-mode w3m multi-term list-packages ag))
(setq-default w3m-bookmark-section-history '("www.baidu.com"))
(setq-default w3m-bookmark-title-history '("www.google.com.au"))
(setq-default w3m-input-url-history '("w3m配置修改" "百度" "www.baidu.com" "http://www.google.com.au/search?q=baidu..."))
